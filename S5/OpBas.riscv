.data
    textoADD: .asciz "ADD: "
    textoSUB: .asciz "SUB: "
    textoAND: .asciz "AND: "
    textoOR: .asciz "OR: "
    textoXOR: .asciz "XOR: "
    textoMASK: .asciz "MASK: "
    textoSLL: .asciz "SLL("
    textoSRL: .asciz "SRL("
    parentese: .asciz "):"
    linha: .asciz "\n"

.text
main:
    li a7, 5 #Lendo um inteiro
    ecall #Salvar
    mv t0, a0 # Ler A

    li a7, 5 #Lendo um inteiro
    ecall #Salvar
    mv t1, a0 # Ler B

    li a7, 5 #Lendo um inteiro
    ecall #Salvar
    mv t2, a0 # Ler C
    
    #ADD entre A e B
 
    li a7, 4 #Imprimir uma string
    la a0, textoADD #coloca o texto em a0
    ecall #Salvar

    add s2, t0, t1 #s2 = a + b

    li a7, 1 #Imprimir o inteiro em a7
    mv a0, s2 #Colocar o inteiro em a0
    ecall #Salvar

    li a7, 4 #Imprimir uma string
    la a0, linha #Colocar a quebra de linha em a0
    ecall #Salvar

    #SUB entre A e B

    li a7, 4 #Imprimir uma string
    la a0, textoSUB #coloca o texto em a0
    ecall #Salvar

    sub s3, t0, t1 #s3 = a - b

    li a7, 1 #Imprimir um inteiro
    mv a0, s3 #Colocar o inteiro em a0
    ecall #Salvar

    li a7, 4 #Imprimir uma string
    la a0, linha #Colocar a quebra de linha em a0
    ecall #Salvar

    #AND entre A e B

    li a7, 4 #Imprimir uma string
    la a0, textoAND #Coloca a string em a0
    ecall #Salvar

    and s4, t0, t1 #Faz o AND bit a bit e armazena em s4

    li a7, 1 #Imprimir um inteiro
    mv a0, s4 #Colocar o inteiro em a0
    ecall #Salvar

    li a7, 4 #Imprimir uma string
    la a0, linha #Coloca a quebra de linha em a0
    ecall #Salvar

    #OR entre A e B

    li a7, 4 #Imprimir uma string
    la a0, textoOR #Coloca o texto em a0
    ecall #Salvar

    or s5, t0, t1 #Faz o OR bit a bit e armazena em s5

    li a7, 1 #Imprimir um inteiro
    mv a0, s5 #Coloca o inteiro em #a0
    ecall #Salvar

    li a7, 4 #Imprimir uma string
    la a0, linha #Coloca a quebra de linha em a0
    ecall #Salvar

    #XOR entre A e B

    li a7, 4 #Imprimir uma string
    la a0, textoXOR #Coloca a string em a0
    ecall #Salvar

    xor s6, t0, t1 #Faz o XOR bit a bit e armazena em s6

    li a7, 1 #Imprimir um inteiro
    mv a0, s6 #Coloca o inteiro em a0
    ecall #Salvar

    li a7, 4 #Imprimir uma string
    la a0, linha #Coloca a quebra de linha em a0
    ecall #Salvar
    
    #MASK entre c e 31

    li a7, 4 #Imprimir uma string
    la a0, textoMASK # Colocar a string em a0
    ecall #Salvar

    andi s7, t2, 31 #Faz o and com o imediato 31

    li a7, 1 #Imprimir um inteiro
    mv a0, s7 #Colocar o inteiro em a0
    ecall #Salvar

    li a7, 4 #Imprimir uma string
    la a0, linha #Coloca a quebra de linha em a0
    ecall #Salvar

    #SLL entre m e A(t0)

    li a7, 4 #Imprimir uma string
	la a0, textoSLL # Colocar a string em a0
	ecall #Salvar

    sll s8, t0, s7 #Faz p SLL em s8

    li a7, 1 #Imprimir um inteiro
	mv a0, s7  #Colocar o inteiro em a0
	ecall #Salvar

    li a7, 4 #Imprimir uma string
	la a0, parentese # Colocar a string em a0
	ecall #Salvar

    li a7, 1#Imprimir um inteiro
	mv a0, s8 #Colocar o inteiro em a0
	ecall #Salvar

    li a7, 4 #Imprimir uma string
    la a0, linha #Coloca a quebra de linha em a0
	ecall #Salvar

    #SRL entre m(MASK) B(t1)

    li a7, 4 #Imprimir uma string
	la a0, textoSRL # Colocar a string em a0   
	ecall #Salvar

    srl s9, t1, s7 #Faz o SRL em s9

    li a7, 1 #Imprimir um inteiro
	mv a0, s7 #Colocar o inteiro em a0
	ecall #Salvar

    li a7, 4 #Imprimir uma string
	la a0, parentese # Colocar a string em a0
	ecall #Salvar

    li a7, 1 #Imprimir um inteiro
	mv a0, s9 #Colocar o inteiro em a0
	ecall #Salvar

    li a7, 4 #Imprimir uma string
    la a0, linha #Coloca a quebra de linha em a0
	ecall #Salvar
    
    #Encerrar

    li a7, 10
    ecall